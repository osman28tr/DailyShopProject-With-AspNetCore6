// <auto-generated />
using System;
using DailyShop.DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyShop.DataAccess.Migrations
{
    [DbContext(typeof(DailyShopContext))]
    [Migration("20231230215422_drop_column_deneme_in_product_table")]
    partial class drop_column_deneme_in_product_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Security.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaim");
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthenticatorType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaim");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsPaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderAddressId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OrderAddresses");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 31,
                            BodyImage = "productimagess",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4524),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme1",
                            Price = 140m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 12,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4534),
                            UserId = 1
                        },
                        new
                        {
                            Id = 32,
                            BodyImage = "productimagess2",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4540),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme2",
                            Price = 123m,
                            Rating = (byte)2,
                            Status = "yeni",
                            Stock = 13,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4541),
                            UserId = 1
                        },
                        new
                        {
                            Id = 33,
                            BodyImage = "productimagess3",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4542),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme3",
                            Price = 140m,
                            Rating = (byte)3,
                            Status = "yeni",
                            Stock = 14,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4542),
                            UserId = 1
                        },
                        new
                        {
                            Id = 34,
                            BodyImage = "productimagess4",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4543),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme4",
                            Price = 124m,
                            Rating = (byte)4,
                            Status = "yeni",
                            Stock = 126,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4544),
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            BodyImage = "productimagess5",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4545),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme5",
                            Price = 126m,
                            Rating = (byte)5,
                            Status = "yeni",
                            Stock = 127,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4545),
                            UserId = 1
                        },
                        new
                        {
                            Id = 36,
                            BodyImage = "productimagess6",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4546),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme6",
                            Price = 167m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 129,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4547),
                            UserId = 1
                        },
                        new
                        {
                            Id = 37,
                            BodyImage = "productimagess7",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4548),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme7",
                            Price = 156m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 12,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4548),
                            UserId = 2
                        },
                        new
                        {
                            Id = 38,
                            BodyImage = "productimagess8",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4549),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme8",
                            Price = 145m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 15,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4549),
                            UserId = 2
                        },
                        new
                        {
                            Id = 39,
                            BodyImage = "productimagess9",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4554),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme9",
                            Price = 167m,
                            Rating = (byte)5,
                            Status = "yeni",
                            Stock = 12,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4554),
                            UserId = 2
                        },
                        new
                        {
                            Id = 40,
                            BodyImage = "productimagess10",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4556),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme10",
                            Price = 140m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 21,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4556),
                            UserId = 2
                        },
                        new
                        {
                            Id = 41,
                            BodyImage = "productimagess11",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4557),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme11",
                            Price = 170m,
                            Rating = (byte)7,
                            Status = "yeni",
                            Stock = 12,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4557),
                            UserId = 2
                        },
                        new
                        {
                            Id = 42,
                            BodyImage = "productimagess12",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4558),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme12",
                            Price = 190m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 24,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4559),
                            UserId = 2
                        },
                        new
                        {
                            Id = 43,
                            BodyImage = "productimagess13",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4560),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme13",
                            Price = 167m,
                            Rating = (byte)2,
                            Status = "yeni",
                            Stock = 126,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4560),
                            UserId = 2
                        },
                        new
                        {
                            Id = 44,
                            BodyImage = "productimagess14",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4561),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme14",
                            Price = 156m,
                            Rating = (byte)1,
                            Status = "yeni",
                            Stock = 272,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4561),
                            UserId = 2
                        },
                        new
                        {
                            Id = 45,
                            BodyImage = "productimagess15",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4562),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme15",
                            Price = 145m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 30,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4563),
                            UserId = 2
                        },
                        new
                        {
                            Id = 46,
                            BodyImage = "productimagess16",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4564),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme16",
                            Price = 167m,
                            Rating = (byte)3,
                            Status = "yeni",
                            Stock = 31,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4564),
                            UserId = 2
                        },
                        new
                        {
                            Id = 47,
                            BodyImage = "productimagess17",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4565),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme17",
                            Price = 178m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 36,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4565),
                            UserId = 2
                        },
                        new
                        {
                            Id = 48,
                            BodyImage = "productimagess18",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4566),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme18",
                            Price = 179m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 58,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4567),
                            UserId = 2
                        },
                        new
                        {
                            Id = 49,
                            BodyImage = "productimagess19",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4568),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme19",
                            Price = 145m,
                            Rating = (byte)2,
                            Status = "yeni",
                            Stock = 78,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4568),
                            UserId = 2
                        },
                        new
                        {
                            Id = 50,
                            BodyImage = "productimagess20",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4569),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme20",
                            Price = 134m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 57,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4569),
                            UserId = 2
                        },
                        new
                        {
                            Id = 51,
                            BodyImage = "productimagess21",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4570),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme21",
                            Price = 145m,
                            Rating = (byte)3,
                            Status = "yeni",
                            Stock = 46,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4571),
                            UserId = 2
                        },
                        new
                        {
                            Id = 52,
                            BodyImage = "productimagess22",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4572),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme22",
                            Price = 167m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 89,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4572),
                            UserId = 1
                        },
                        new
                        {
                            Id = 53,
                            BodyImage = "productimagess23",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4573),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme23",
                            Price = 189m,
                            Rating = (byte)4,
                            Status = "yeni",
                            Stock = 57,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4573),
                            UserId = 1
                        },
                        new
                        {
                            Id = 54,
                            BodyImage = "productimagess24",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4574),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme24",
                            Price = 190m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 38,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4575),
                            UserId = 1
                        },
                        new
                        {
                            Id = 55,
                            BodyImage = "productimagess25",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4577),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme25",
                            Price = 145m,
                            Rating = (byte)5,
                            Status = "yeni",
                            Stock = 77,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4577),
                            UserId = 3
                        },
                        new
                        {
                            Id = 56,
                            BodyImage = "productimagess26",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4578),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme26",
                            Price = 123m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 96,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4579),
                            UserId = 3
                        },
                        new
                        {
                            Id = 57,
                            BodyImage = "productimagess27",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4580),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme27",
                            Price = 112m,
                            Rating = (byte)1,
                            Status = "yeni",
                            Stock = 65,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4580),
                            UserId = 3
                        },
                        new
                        {
                            Id = 58,
                            BodyImage = "productimagess28",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4581),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme28",
                            Price = 145m,
                            Rating = (byte)3,
                            Status = "yeni",
                            Stock = 67,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4581),
                            UserId = 3
                        },
                        new
                        {
                            Id = 59,
                            BodyImage = "productimagess29",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4582),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme29",
                            Price = 167m,
                            Rating = (byte)7,
                            Status = "yeni",
                            Stock = 47,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4583),
                            UserId = 3
                        },
                        new
                        {
                            Id = 60,
                            BodyImage = "productimagess30",
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4584),
                            Description = "denemedes1",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "deneme30",
                            Price = 178m,
                            Rating = (byte)6,
                            Status = "yeni",
                            Stock = 98,
                            UpdatedAt = new DateTime(2023, 12, 31, 0, 54, 22, 404, DateTimeKind.Local).AddTicks(4584),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductColor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductColor");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductSize", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SizeId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentReviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte?>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ParentReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.WebSiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("WebSiteSettings");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.AppUser", b =>
                {
                    b.HasBaseType("Core.Security.Entities.User");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("Core.Security.Entities.RefreshToken", b =>
                {
                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Security.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Security.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Address", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Addresses")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Cart", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.CartItem", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Category", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Favorite", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Order", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.OrderAddress", "OrderAddress")
                        .WithMany()
                        .HasForeignKey("OrderAddressId");

                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("OrderAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.OrderItem", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("DailyShop.Entities.Concrete.Payment", "OrderId");

                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Product", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductColor", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductImage", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.ProductSize", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany("Sizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyShop.Entities.Concrete.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Review", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId");

                    b.HasOne("DailyShop.Entities.Concrete.Review", null)
                        .WithMany("SubReviews")
                        .HasForeignKey("ParentReviewId");

                    b.HasOne("DailyShop.Entities.Concrete.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId");

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Wallet", b =>
                {
                    b.HasOne("DailyShop.Entities.Concrete.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("Core.Security.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("DailyShop.Entities.Concrete.AppUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Colors");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");

                    b.Navigation("Sizes");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Review", b =>
                {
                    b.Navigation("SubReviews");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DailyShop.Entities.Concrete.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
